
################################################################################
#
#  Copyright (c) 2020, Perry L Miller IV
#  All rights reserved.
#  MIT License: https://opensource.org/licenses/mit-license.html
#
################################################################################

################################################################################
#
#  Azure Pipelines configuration file.
#
#  Pipeline results are here:
#
#    https://dev.azure.com/perryiv/generic_scene_graph
#
#  Resources:
#
#    https://docs.conan.io/en/1.10/howtos/run_conan_in_docker.html
#    https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted
#    https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables
#    https://docs.microsoft.com/en-us/azure/devops/pipelines/process/container-phases
#    https://docs.microsoft.com/en-us/azure/devops/pipelines/process/expressions
#    https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases#timeouts
#    https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables#secret-variables
#    https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks
#    https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/shell-script
#    https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema
#    https://docs.microsoft.com/en-us/visualstudio/install/build-tools-container
#    https://docs.microsoft.com/en-us/visualstudio/install/use-command-line-parameters-to-install-visual-studio
#    https://github.com/actions/virtual-environments
#    https://github.com/conan-io/conan-docker-tools/blob/master/azure-pipelines.yml
#    https://github.com/jonico/libzengithub/blob/master/azure-pipelines.yml
#    https://github.com/microsoft/azure-pipelines-agent/issues/2043
#    https://github.com/microsoft/containerregistry
#    https://hub.docker.com/_/microsoft-windows-servercore
#    https://hub.docker.com/r/conanio/gcc8
#    https://jaylee.org/archive/2019/03/21/azure-devops-wasm-build-container.html
#    https://medium.com/@brentrobinson5/containerised-ci-cd-pipelines-with-azure-devops-74064c679f20
#
################################################################################

trigger:
- master

jobs:
- job: Build
  timeoutInMinutes: 0

  strategy:
    matrix:

      Linux_GCC_10_CPP_17:
        image_name: 'ubuntu-20.04'
        build_generator: Ninja
        install_command: sudo ninja install
        cpp_standard: 17
        verbose_makefile: ON
        the_script: docker run --rm -v `pwd`:/home/conan conanio/gcc10 /bin/bash -c "sh scripts/before_ubuntu.sh && sh scripts/ci.sh"

      Linux_GCC_10_CPP_14:
        image_name: 'ubuntu-20.04'
        build_generator: Ninja
        install_command: sudo ninja install
        cpp_standard: 14
        verbose_makefile: ON
        the_script: docker run --rm -v `pwd`:/home/conan conanio/gcc10 /bin/bash -c "sh scripts/before_ubuntu.sh && sh scripts/ci.sh"

      Linux_GCC_9_CPP_17:
        image_name: 'ubuntu-20.04'
        build_generator: Ninja
        install_command: sudo ninja install
        cpp_standard: 17
        verbose_makefile: ON
        the_script: docker run --rm -v `pwd`:/home/conan conanio/gcc9 /bin/bash -c "sh scripts/before_ubuntu.sh && sh scripts/ci.sh"

      Linux_GCC_9_CPP_14:
        image_name: 'ubuntu-20.04'
        build_generator: Ninja
        install_command: sudo ninja install
        cpp_standard: 14
        verbose_makefile: ON
        the_script: docker run --rm -v `pwd`:/home/conan conanio/gcc9 /bin/bash -c "sh scripts/before_ubuntu.sh && sh scripts/ci.sh"

      Linux_GCC_8_CPP_17:
        image_name: 'ubuntu-20.04'
        build_generator: Ninja
        install_command: sudo ninja install
        cpp_standard: 17
        verbose_makefile: ON
        the_script: docker run --rm -v `pwd`:/home/conan conanio/gcc8 /bin/bash -c "sh scripts/before_ubuntu.sh && sh scripts/ci.sh"

      Linux_GCC_8_CPP_14:
        image_name: 'ubuntu-20.04'
        build_generator: Ninja
        install_command: sudo ninja install
        cpp_standard: 14
        verbose_makefile: ON
        the_script: docker run --rm -v `pwd`:/home/conan conanio/gcc8 /bin/bash -c "sh scripts/before_ubuntu.sh && sh scripts/ci.sh"

      # All versions of macOS appear to be using clang 11, so just doing that.

      # Apple_Clang_11_CPP_17:
      #   image_name: 'macOS-10.15'
      #   build_generator: 'Unix Makefiles'
      #   install_command: sudo make install
      #   cpp_standard: 17
      #   verbose_makefile: ON
      #   the_script: cd scripts && sh before_apple.sh && sh ci.sh
      #
      # Apple_Clang_11_CPP_14:
      #   image_name: 'macOS-10.15'
      #   build_generator: 'Unix Makefiles'
      #   install_command: sudo make install
      #   cpp_standard: 14
      #   verbose_makefile: ON
      #   the_script: cd scripts && sh before_apple.sh && sh ci.sh

      # On windows just using the host machine.

      # Visual_Studio_2019_CPP_17:
      #   image_name: 'windows-2019'
      #   build_generator: 'Visual Studio 16 2019'
      #   install_command: cmake --build . --target install
      #   cpp_standard: 17
      #   verbose_makefile: OFF
      #   before_script: ./scripts/before_windows.sh
      #   the_script: ./scripts/ci.sh
      #
      # Visual_Studio_2019_CPP_14:
      #   image_name: 'windows-2019'
      #   build_generator: 'Visual Studio 16 2019'
      #   install_command: cmake --build . --target install
      #   cpp_standard: 14
      #   verbose_makefile: OFF
      #   before_script: ./scripts/before_windows.sh
      #   the_script: ./scripts/ci.sh

  pool:
    vmImage: $(image_name)

  variables:
    THIS_JOB_BUILD_GENERATOR: $(build_generator)
    THIS_JOB_INSTALL_COMMAND: $(install_command)
    THIS_JOB_CPP_STANDARD: $(cpp_standard)
    THIS_JOB_VERBOSE_MAKEFILE: $(verbose_makefile)

  steps:

    # - task: BatchScript@1
    #   inputs:
    #     filename: scripts/before_windows.bat
    #   condition: contains(variables['Agent.JobName'], 'Visual_Studio')
    #   displayName: Install

    # - task: Bash@3
    #   inputs:
    #     filePath: $(before_script)
    #   displayName: Before

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: $(the_script)
      env:
        THIS_JOB_BUILD_GENERATOR: $(build_generator)
        THIS_JOB_INSTALL_COMMAND: $(install_command)
        THIS_JOB_CPP_STANDARD: $(cpp_standard)
        THIS_JOB_VERBOSE_MAKEFILE: $(verbose_makefile)
      displayName: Build

    # condition: not(contains(variables['Agent.JobName'], 'Visual_Studio'))
    # - script: $(the_script)
    #   displayName: Build
