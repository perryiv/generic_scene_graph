
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2020, Perry L Miller IV
//  All rights reserved.
//  MIT License: https://opensource.org/licenses/mit-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Base class for all reference-counted objects.
//
///////////////////////////////////////////////////////////////////////////////

#include "GSG/Base/Objects/Object.h"

#include "Usul/Tools/NoThrow.h"

#include <functional>


namespace GSG {
namespace Base {
namespace Objects {


// Add the boilerplate code.
GSG_IMPLEMENT_OBJECT_CLASS ( Object );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Object::Object() : BaseClass()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Object::~Object()
{
  USUL_TOOLS_NO_THROW ( 1592286404, std::bind ( &Object::_destroyObject, this ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destroy this instance.
//
///////////////////////////////////////////////////////////////////////////////

void Object::_destroyObject()
{
}


} // namespace Objects
} // namespace Base
} // namespace GSG
