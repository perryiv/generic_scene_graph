
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2020, Perry L Miller IV
//  All rights reserved.
//  MIT License: https://opensource.org/licenses/mit-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Base class for all scene-graph group nodes.
//
///////////////////////////////////////////////////////////////////////////////

#include "GSG/Nodes/Groups/Group.h"

#include "Usul/Tools/NoThrow.h"

#include <functional>


namespace GSG {
namespace Nodes {
namespace Groups {


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Group::Group() : BaseClass(),
  _children()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Group::~Group()
{
  USUL_TOOLS_NO_THROW ( 1591773842, std::bind ( &Group::_destroyGroup, this ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destroy this instance.
//
///////////////////////////////////////////////////////////////////////////////

void Group::_destroyGroup()
{
  this->clear();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Remove all the child nodes.
//
///////////////////////////////////////////////////////////////////////////////

void Group::removeAllChildren()
{
  Children children;
  {
    Guard guard ( this->mutex() );
    children = _children;
    _children.clear();
  }

  for ( iterator i = children.begin(); i != children.end(); ++i )
  {
    NodePtr &node = *i;
    node->_removeParent ( this );
  }
}

} // namespace Groups
} // namespace Nodes
} // namespace GSG
