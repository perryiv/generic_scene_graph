
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2020, Perry L Miller IV
//  All rights reserved.
//  MIT License: https://opensource.org/licenses/mit-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Base class for all scene-graph nodes.
//
///////////////////////////////////////////////////////////////////////////////

#include "GSG/Scene/Nodes/Node.h"
#include "GSG/Visitors/Visitor.h"

#include "Usul/Errors/Exceptions.h"
#include "Usul/Tools/NoThrow.h"

#include <functional>
#include <stdexcept>


namespace GSG {
namespace Scene {
namespace Nodes {


// Add the boilerplate code.
GSG_IMPLEMENT_NODE_CLASS ( Node );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Node::Node() : BaseClass(),
  _mutex(),
  _flags ( VISIBLE | INTERSECTABLE | CONTRIBUTE_TO_BOUNDS ),
  _parents()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Node::~Node()
{
  USUL_TOOLS_NO_THROW ( 1591770752, std::bind ( &Node::_destroyNode, this ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destroy this instance.
//
///////////////////////////////////////////////////////////////////////////////

void Node::_destroyNode()
{
  if ( false == _parents.empty() )
  {
    throw Usul::Errors::RuntimeError ( "Destroying node with parents" );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Does this node have the given parent?
//
///////////////////////////////////////////////////////////////////////////////

bool Node::hasParent ( const Parents::value_type &parent ) const
{
  Guard guard ( this->mutex() );
  return ( _parents.end() != _parents.find ( parent ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Add the parent.
//
///////////////////////////////////////////////////////////////////////////////

void Node::_addParent ( Node *node )
{
  Parents::value_type parent ( node );

  if ( false == parent.valid() )
  {
    throw Usul::Errors::RuntimeError ( "Adding invalid parent" );
  }

  // Guard before checking for an existing parent.
  Guard guard ( this->mutex() );

  if ( true == this->hasParent ( parent ) )
  {
    throw Usul::Errors::RuntimeError ( "This node already has the given parent" );
  }

  _parents.insert ( Parents::value_type ( parent ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Remove the parent.
//
///////////////////////////////////////////////////////////////////////////////

void Node::_removeParent ( Node *parent )
{
  Guard guard ( this->mutex() );
  _parents.erase ( Parents::value_type ( parent ) );
}


} // namespace Nodes
} // namespace Scene
} // namespace GSG
