
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2021, Perry L Miller IV
//  All rights reserved.
//  MIT License: https://opensource.org/licenses/mit-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Container of graphics state.
//
///////////////////////////////////////////////////////////////////////////////

#include "GSG/Scene/State/Container.h"

#include "Usul/Errors/Exceptions.h"
#include "Usul/Tools/NoThrow.h"

#include <functional>


namespace GSG {
namespace Scene {
namespace State {


// Add the boilerplate code.
GSG_IMPLEMENT_OBJECT_CLASS ( Container )


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Container::Container ( unsigned long id, const PropertyMap &props ) : BaseClass(),
  _id ( id ),
  _props ( props ),
  _apply(),
  _reset()
{
}
Container::Container ( unsigned long id ) : Container ( id, PropertyMap() )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Container::~Container()
{
  USUL_TOOLS_NO_THROW ( 1609651248, std::bind ( &Container::_destroyContainer, this ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destroy this instance.
//
///////////////////////////////////////////////////////////////////////////////

void Container::_destroyContainer()
{
  _props.clear();
  _apply = nullptr;
  _reset = nullptr;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Apply/reset the state.
//
///////////////////////////////////////////////////////////////////////////////

void Container::apply()
{
  if ( _apply )
  {
    _apply ( *this );
  }
}
void Container::reset()
{
  if ( _reset )
  {
    _reset ( *this );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the apply callback.
//
///////////////////////////////////////////////////////////////////////////////

void Container::setApplyCallback ( const Callback &apply )
{
  _apply = apply;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the reset callback.
//
///////////////////////////////////////////////////////////////////////////////

void Container::setResetCallback ( const Callback &reset )
{
  _reset = reset;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the property map.
//
///////////////////////////////////////////////////////////////////////////////

void Container::setPropertyMap ( const PropertyMap &props )
{
  _props = props;
}


} // namespace State
} // namespace Scene
} // namespace GSG
